// file path to 'entities.java' class (THIS)
package net.jobcompare.backend.entities;

import jakarta.persistence.Column;
// Notice: during earlier project used 'javax' library for persistence b/c Java Spring Boot version was below 3 ...
// ... here using 'jakarta' library as this version of Spring Boot is 3.5.6
// ... also could continue using 'javax' library if decided to use JDBC (low-level, lengthy) over Spring JPA + Spring Web
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
// import lombok dependencies to cut down on excess lines of code for getters, setters, constructors
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

// these lombok shorten annotations will provide each private attributes w/ their getter & setter methods
// normally after initializing a private attribute ...
/* public Integer getJobId(){
 * }
 * public void setMessageId(Integer jobId){
 *      this.jobId = jobId;
 * }
} */
@Getter     // '@Data' includes both '@Getter', '@Setter', 
@Setter
// lombok annotations to generate the constructors ...
/* Aside: what if I want a custom constructor for posting jobs? */
// ... and initialize all the fields (order is important!)
@AllArgsConstructor
// ... default constructor w/o any args necessary for entity instantiation
@NoArgsConstructor
// '@Entity' annotation from Java Persistence API (JPA) to indicate 'Entity.java' class as a persistent entity ...
// ... aka this class will be mapped to a DB table where its instance is stored & retrieved from DB table
@Entity
// '@Table' annotation to customize table name otw by default table name === class name ('Job')
@Table(name = "jobs") 
public class Job {
    @Column(name = "jobId")
    // '@Id' annotation indicates this field as the PRIMARY_KEY --- '@Entity' requires a PRIMARY_KEY
    @Id 
    // provides auto-generation of key set explicitly to 'IDENTITY' type s.t. the PK is generated upon 'INSERT' record operation by DB
    /* Aside: default behavior was 'GenerationType.AUTO' in which JPA picks strategy depending on selected DB dialect (MySQL, Oracle, etc.)   */
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer jobId;
    @Column(name = "title")
    private String title;
    @Column(name = "description")
    private String description;
    @Column(name = "company")
    private String company;
    @Column(name = "location")
    private String location; 
    @Column(name = "yearOfExperience")
    private Integer yearOfExperience;
    @Column(name = "costOfLivingIndex")
    private Integer costOfLivingIndex;
    @Column(name = "yearlySalary")
    private Float yearlySalary;
    // '@Column' annotation maps 'hiringTeamEmail' field to 'email' column where it must NOT be of null value & it's unique (no duplicates)
    // '@Column' annotation by default aka w/o this annotation would map its field name to a column of DB table using exact same name ...
    // ... from previous project example '@Column' was still used despite it being redundant ... may remove for DRY-er
    /* Some sense of data validation? */
    @Column(name = "email", nullable = false, unique = true)
    private String hiringTeamEmail;
    @Column(name = "timeOfPosting")
    private Long timeOfPosting;
    // 'teamId' field in this 'Job' schema must be unique, non-falsy (not empty)
    @Column(name = "modId", nullable = false, unique = true)
    private Integer modId;

    // private String locationCity;
    // private String locationState;
    // private Float yearlyBonus;
    // private Integer match401k;  // nearest whole percentage
    // private Float internetStipend;
    // private Float accidentInsurance;
    // private Float tuitionReimbursement;

    // custom constructor w/o 'jobId' s.t. the when POST-ing a new 'job', the id could be generated by the DB
    public Job(String title, String description, String company, String location, Integer yearOfExperience, Integer costOfLivingIndex, Float yearlySalary, 
    String hiringTeamEmail, Long timeOfPosting, Integer modId){
        this.title = title;
        this.company = company;
        this.location = location;
        this.description = description;
        // this.locationCity = locationCity;
        // this.locationState = locationState;
        this.yearOfExperience = yearOfExperience;
        this.costOfLivingIndex = costOfLivingIndex;
        this.yearlySalary = yearlySalary;
        this.hiringTeamEmail = hiringTeamEmail;
        this.timeOfPosting = timeOfPosting;
        this.modId = modId;
    }

}
